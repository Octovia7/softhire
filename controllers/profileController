const Profile = require("../models/Profile");
const cloudinary = require("../utils/cloudinary"); // Correct import

// CREATE Profile

exports.createProfile = async (req, res) => {
  try {
    const {
      name,
      location,
      primaryRole,
      yearsOfExperience,
      openToRoles,
      bio,
      socialProfiles,
      workExperience,
      education,
      skills,
      achievements,
      identity
    } = req.body;

    let profilePhoto = null;

    // Upload profile photo to Cloudinary
    if (req.file) {
      const result = await cloudinary.uploader.upload(req.file.path, {
        folder: "profilePhotos",
      });
      profilePhoto = result.secure_url;
    }

    // Fields that might be stringified JSON in req.body
    const fieldsToParse = {
      openToRoles,
      socialProfiles,
      workExperience,
      education,
      skills,
      achievements,
      identity,
    };

    const parsedData = {};

    for (const [key, value] of Object.entries(fieldsToParse)) {
      if (value) {
        if (typeof value === 'string') {
          try {
            parsedData[key] = JSON.parse(value);
          } catch (error) {
            console.error(`Error parsing ${key}:`, error);
            // Use [] for arrays, {} for objects
            parsedData[key] = Array.isArray(Profile.schema.path(key).instance === 'Array') ? [] : {};
          }
        } else {
          parsedData[key] = value;
        }
      }
    }

    // Create profile with user's ID
    const newProfile = new Profile({
      userId: req.user.id,
      name,
      profilePhoto,
      location,
      primaryRole,
      yearsOfExperience,
      bio,
      ...parsedData
    });

    await newProfile.save();

    return res.status(201).json({
      message: 'Profile created successfully',
      profile: {
        _id: newProfile._id,
        ...newProfile.toObject(),
      },
    });
  } catch (error) {
    console.error('Error creating profile:', error);
    return res.status(500).json({ error: 'Server Error' });
  }
};

// GET Profile by ID
exports.getProfile = async (req, res) => {
  try {
    const { id } = req.params;

    const profile = await Profile.findById(id);

    if (!profile) {
      return res.status(404).json({ error: "Profile not found" });
    }

    res.status(200).json(profile);
  } catch (error) {
    console.error("Error fetching profile:", error);
    res.status(500).json({ error: "Server error" });
  }
};

// UPDATE Profile by ID
exports.updateProfile = async (req, res) => {
  try {
    const { id } = req.params;

    const profile = await Profile.findById(id);

    if (!profile) {
      return res.status(404).json({ error: "Profile not found" });
    }

    // üõ°Ô∏è Only the owner can update
    if (profile.userId.toString() !== req.user.id) {  // ‚úÖ Use userId
      return res.status(403).json({ error: "Access denied. You can only update your own profile." });
    }

    const updatedData = req.body;

    const updatedProfile = await Profile.findByIdAndUpdate(id, updatedData, {
      new: true,
      runValidators: true,
    });

    res.status(200).json({ message: "Profile updated successfully", profile: updatedProfile });
  } catch (error) {
    console.error("Error updating profile:", error);
    res.status(500).json({ error: "Server error" });
  }
};

// DELETE Profile by ID
exports.deleteProfile = async (req, res) => {
  try {
    const { id } = req.params;

    const profile = await Profile.findById(id);

    if (!profile) {
      return res.status(404).json({ error: "Profile not found" });
    }

    // üõ°Ô∏è Only the owner can delete
    if (profile.userId.toString() !== req.user.id) {  // ‚úÖ Use userId
      return res.status(403).json({ error: "Access denied. You can only delete your own profile." });
    }

    await Profile.findByIdAndDelete(id);

    res.status(200).json({ message: "Profile deleted successfully" });
  } catch (error) {
    console.error("Error deleting profile:", error);
    res.status(500).json({ error: "Server error" });
  }
};
